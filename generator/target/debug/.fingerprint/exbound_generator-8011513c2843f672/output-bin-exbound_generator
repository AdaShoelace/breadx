{"message":"adding items after statements is confusing, since items exist from the start of the scope","code":{"code":"clippy::items_after_statements","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1482,"byte_end":1501,"line_start":59,"line_end":59,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    use std::io::Write;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":56,"byte_end":72,"line_start":4,"line_end":4,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"#![warn(clippy::pedantic)]","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(clippy::items_after_statements)]` implied by `#[warn(clippy::pedantic)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: adding items after statements is confusing, since items exist from the start of the scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    use std::io::Write;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(clippy::pedantic)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::items_after_statements)]` implied by `#[warn(clippy::pedantic)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\u001b[0m\n\n"}
{"message":"associated function is never used: `expr`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":18690,"byte_end":18694,"line_start":545,"line_end":545,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    fn expr(&self) -> String {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function is never used: `expr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:545:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn expr(&self) -> String {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":80,"byte_end":124,"line_start":7,"line_end":7,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn derives(d: &[&str]) -> syn::Attribute {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":56,"byte_end":72,"line_start":4,"line_end":4,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"#![warn(clippy::pedantic)]","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(clippy::must_use_candidate)]` implied by `#[warn(clippy::pedantic)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":80,"byte_end":124,"line_start":7,"line_end":7,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn derives(d: &[&str]) -> syn::Attribute {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":"#[must_use] pub fn derives(d: &[&str]) -> syn::Attribute","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/attrs.rs:7:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn derives(d: &[&str]) -> syn::Attribute {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn derives(d: &[&str]) -> syn::Attribute`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(clippy::pedantic)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::must_use_candidate)]` implied by `#[warn(clippy::pedantic)]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":588,"byte_end":631,"line_start":27,"line_end":27,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub fn repr_transparent() -> syn::Attribute {","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":588,"byte_end":631,"line_start":27,"line_end":27,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub fn repr_transparent() -> syn::Attribute {","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"#[must_use] pub fn repr_transparent() -> syn::Attribute","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/attrs.rs:27:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn repr_transparent() -> syn::Attribute {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn repr_transparent() -> syn::Attribute`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":881,"byte_end":915,"line_start":38,"line_end":38,"column_start":1,"column_end":35,"is_primary":true,"text":[{"text":"pub fn inliner() -> syn::Attribute {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/attrs.rs","byte_start":881,"byte_end":915,"line_start":38,"line_end":38,"column_start":1,"column_end":35,"is_primary":true,"text":[{"text":"pub fn inliner() -> syn::Attribute {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":"#[must_use] pub fn inliner() -> syn::Attribute","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/attrs.rs:38:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn inliner() -> syn::Attribute {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn inliner() -> syn::Attribute`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":73,"byte_end":123,"line_start":7,"line_end":7,"column_start":1,"column_end":51,"is_primary":true,"text":[{"text":"pub fn str_to_pathseg(s: &str) -> syn::PathSegment {","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":73,"byte_end":123,"line_start":7,"line_end":7,"column_start":1,"column_end":51,"is_primary":true,"text":[{"text":"pub fn str_to_pathseg(s: &str) -> syn::PathSegment {","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":"#[must_use] pub fn str_to_pathseg(s: &str) -> syn::PathSegment","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/shortcuts.rs:7:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn str_to_pathseg(s: &str) -> syn::PathSegment {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn str_to_pathseg(s: &str) -> syn::PathSegment`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":267,"byte_end":307,"line_start":15,"line_end":15,"column_start":1,"column_end":41,"is_primary":true,"text":[{"text":"pub fn str_to_path(s: &str) -> syn::Path {","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":267,"byte_end":307,"line_start":15,"line_end":15,"column_start":1,"column_end":41,"is_primary":true,"text":[{"text":"pub fn str_to_path(s: &str) -> syn::Path {","highlight_start":1,"highlight_end":41}],"label":null,"suggested_replacement":"#[must_use] pub fn str_to_path(s: &str) -> syn::Path","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/shortcuts.rs:15:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn str_to_path(s: &str) -> syn::Path {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn str_to_path(s: &str) -> syn::Path`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":433,"byte_end":471,"line_start":23,"line_end":23,"column_start":1,"column_end":39,"is_primary":true,"text":[{"text":"pub fn str_to_ty(s: &str) -> syn::Type {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":433,"byte_end":471,"line_start":23,"line_end":23,"column_start":1,"column_end":39,"is_primary":true,"text":[{"text":"pub fn str_to_ty(s: &str) -> syn::Type {","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":"#[must_use] pub fn str_to_ty(s: &str) -> syn::Type","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/shortcuts.rs:23:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn str_to_ty(s: &str) -> syn::Type {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn str_to_ty(s: &str) -> syn::Type`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":581,"byte_end":625,"line_start":31,"line_end":31,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn str_to_exprpath(s: &str) -> syn::Expr {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/shortcuts.rs","byte_start":581,"byte_end":625,"line_start":31,"line_end":31,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"pub fn str_to_exprpath(s: &str) -> syn::Expr {","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":"#[must_use] pub fn str_to_exprpath(s: &str) -> syn::Expr","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/shortcuts.rs:31:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn str_to_exprpath(s: &str) -> syn::Expr {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn str_to_exprpath(s: &str) -> syn::Expr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/mod.rs","byte_start":101,"byte_end":136,"line_start":9,"line_end":9,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub fn pub_vis() -> syn::Visibility {","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/mod.rs","byte_start":101,"byte_end":136,"line_start":9,"line_end":9,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"pub fn pub_vis() -> syn::Visibility {","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"#[must_use] pub fn pub_vis() -> syn::Visibility","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/mod.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn pub_vis() -> syn::Visibility {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn pub_vis() -> syn::Visibility`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"this function could have a `#[must_use]` attribute","code":{"code":"clippy::must_use_candidate","explanation":null},"level":"warning","spans":[{"file_name":"src/syn_util/mod.rs","byte_start":243,"byte_end":276,"line_start":16,"line_end":16,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"pub fn self_fnarg() -> syn::FnArg {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/syn_util/mod.rs","byte_start":243,"byte_end":276,"line_start":16,"line_end":16,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"pub fn self_fnarg() -> syn::FnArg {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"#[must_use] pub fn self_fnarg() -> syn::FnArg","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function could have a `#[must_use]` attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/syn_util/mod.rs:16:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn self_fnarg() -> syn::FnArg {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add the attribute: `#[must_use] pub fn self_fnarg() -> syn::FnArg`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":428,"byte_end":439,"line_start":23,"line_end":23,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use syn_util::*;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":56,"byte_end":72,"line_start":4,"line_end":4,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"#![warn(clippy::pedantic)]","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(clippy::wildcard_imports)]` implied by `#[warn(clippy::pedantic)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":428,"byte_end":439,"line_start":23,"line_end":23,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use syn_util::*;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":"syn_util::{derives, inliner, pub_vis, self_fnarg, str_to_path, str_to_pathseg, str_to_ty}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse syn_util::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `syn_util::{derives, inliner, pub_vis, self_fnarg, str_to_path, str_to_pathseg, str_to_ty}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(clippy::pedantic)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::wildcard_imports)]` implied by `#[warn(clippy::pedantic)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/xidtype.rs","byte_start":28,"byte_end":46,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use crate::syn_util::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/xidtype.rs","byte_start":28,"byte_end":46,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use crate::syn_util::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"crate::syn_util::{derives, inliner, pub_vis, repr_transparent, self_fnarg, str_to_exprpath, str_to_path, str_to_ty}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/xidtype.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::syn_util::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `crate::syn_util::{derives, inliner, pub_vis, repr_transparent, self_fnarg, str_to_exprpath, str_to_path, str_to_ty}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/xidunion.rs","byte_start":49,"byte_end":67,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use crate::syn_util::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/xidunion.rs","byte_start":49,"byte_end":67,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use crate::syn_util::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"crate::syn_util::{derives, inliner, self_fnarg, str_to_exprpath, str_to_path, str_to_pathseg, str_to_ty}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/xidunion.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::syn_util::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `crate::syn_util::{derives, inliner, self_fnarg, str_to_exprpath, str_to_path, str_to_pathseg, str_to_ty}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"use Option::map_or instead of an if let/else","code":{"code":"clippy::option_if_let_else","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1751,"byte_end":1943,"line_start":69,"line_end":73,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if let Some(name) = elem.attributes.get(\"name\") {","highlight_start":13,"highlight_end":62},{"text":"                Ok(xidtype::xidtype(&name.to_camel_case()))","highlight_start":1,"highlight_end":60},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Err(Failures::MalformedXidtype)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":56,"byte_end":72,"line_start":4,"line_end":4,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"#![warn(clippy::pedantic)]","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(clippy::option_if_let_else)]` implied by `#[warn(clippy::pedantic)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1751,"byte_end":1943,"line_start":69,"line_end":73,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if let Some(name) = elem.attributes.get(\"name\") {","highlight_start":13,"highlight_end":62},{"text":"                Ok(xidtype::xidtype(&name.to_camel_case()))","highlight_start":1,"highlight_end":60},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Err(Failures::MalformedXidtype)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"elem.attributes.get(\"name\").map_or(Err(Failures::MalformedXidtype), |name| Ok(xidtype::xidtype(&name.to_camel_case())))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use Option::map_or instead of an if let/else\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:69:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(name) = elem.attributes.get(\"name\") {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Ok(xidtype::xidtype(&name.to_camel_case()))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(Failures::MalformedXidtype)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `elem.attributes.get(\"name\").map_or(Err(Failures::MalformedXidtype), |name| Ok(xidtype::xidtype(&name.to_camel_case())))`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(clippy::pedantic)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::option_if_let_else)]` implied by `#[warn(clippy::pedantic)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else\u001b[0m\n\n"}
{"message":"this function has too many lines (193/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3303,"byte_end":12409,"line_start":112,"line_end":336,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn xstruct(name: &str, subelems: Vec<Element>) -> Result<Vec<syn::Item>, Failures> {","highlight_start":1,"highlight_end":85},{"text":"    let mut subelems = subelems","highlight_start":1,"highlight_end":32},{"text":"        .into_iter()","highlight_start":1,"highlight_end":21},{"text":"        .filter_map(|item| TryInto::<Field>::try_into(item).ok())","highlight_start":1,"highlight_end":66},{"text":"        .collect::<Vec<Field>>();","highlight_start":1,"highlight_end":34},{"text":"    normalize_fields(&mut subelems);","highlight_start":1,"highlight_end":37},{"text":"    if subelems.is_empty() {","highlight_start":1,"highlight_end":29},{"text":"        panic!();","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /* Equivalent generated code:","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"       #[derive(Default, Debug)]","highlight_start":1,"highlight_end":33},{"text":"       pub struct {name} {","highlight_start":1,"highlight_end":27},{"text":"           {fields}","highlight_start":1,"highlight_end":20},{"text":"       }","highlight_start":1,"highlight_end":9},{"text":"    */","highlight_start":1,"highlight_end":7},{"text":"    let struct_defn = syn::Item::Struct(syn::ItemStruct {","highlight_start":1,"highlight_end":58},{"text":"        attrs: vec![derives(&[\"Default\", \"Debug\"])],","highlight_start":1,"highlight_end":53},{"text":"        vis: pub_vis(),","highlight_start":1,"highlight_end":24},{"text":"        struct_token: Default::default(),","highlight_start":1,"highlight_end":42},{"text":"        ident: syn::Ident::new(&name, Span::call_site()),","highlight_start":1,"highlight_end":58},{"text":"        generics: Default::default(),","highlight_start":1,"highlight_end":38},{"text":"        fields: syn::FieldsNamed {","highlight_start":1,"highlight_end":35},{"text":"            brace_token: Default::default(),","highlight_start":1,"highlight_end":45},{"text":"            named: subelems","highlight_start":1,"highlight_end":28},{"text":"                .iter()","highlight_start":1,"highlight_end":24},{"text":"                .filter_map(|f| {","highlight_start":1,"highlight_end":34},{"text":"                    if let Field::Actual { name, ty, .. } = f {","highlight_start":1,"highlight_end":64},{"text":"                        Some(syn::Field {","highlight_start":1,"highlight_end":42},{"text":"                            attrs: vec![],","highlight_start":1,"highlight_end":43},{"text":"                            vis: pub_vis(),","highlight_start":1,"highlight_end":44},{"text":"                            ident: Some(name.clone()),","highlight_start":1,"highlight_end":55},{"text":"                            colon_token: Some(Default::default()),","highlight_start":1,"highlight_end":67},{"text":"                            ty: ty.clone(),","highlight_start":1,"highlight_end":44},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        None","highlight_start":1,"highlight_end":29},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .collect(),","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        .into(),","highlight_start":1,"highlight_end":17},{"text":"        semi_token: None,","highlight_start":1,"highlight_end":26},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /* Equivalent generated code:","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"       #[inline]","highlight_start":1,"highlight_end":17},{"text":"       fn size(&self) -> usize {","highlight_start":1,"highlight_end":33},{"text":"           /* the sum of the size of the fields, the padding hints, and the lengths","highlight_start":1,"highlight_end":84},{"text":"              (which are represented as 16 bit unsigned integers, by the way */","highlight_start":1,"highlight_end":80},{"text":"       }","highlight_start":1,"highlight_end":9},{"text":"    */","highlight_start":1,"highlight_end":7},{"text":"    let size_method = syn::ImplItemMethod {","highlight_start":1,"highlight_end":44},{"text":"        attrs: vec![inliner()],","highlight_start":1,"highlight_end":32},{"text":"        vis: syn::Visibility::Inherited,","highlight_start":1,"highlight_end":41},{"text":"        defaultness: None,","highlight_start":1,"highlight_end":27},{"text":"        sig: syn::Signature {","highlight_start":1,"highlight_end":30},{"text":"            constness: None,","highlight_start":1,"highlight_end":29},{"text":"            asyncness: None,","highlight_start":1,"highlight_end":29},{"text":"            unsafety: None,","highlight_start":1,"highlight_end":28},{"text":"            abi: None,","highlight_start":1,"highlight_end":23},{"text":"            fn_token: Default::default(),","highlight_start":1,"highlight_end":42},{"text":"            ident: syn::Ident::new(\"size\", Span::call_site()),","highlight_start":1,"highlight_end":63},{"text":"            generics: Default::default(),","highlight_start":1,"highlight_end":42},{"text":"            paren_token: Default::default(),","highlight_start":1,"highlight_end":45},{"text":"            inputs: iter::empty::<syn::FnArg>().collect(),","highlight_start":1,"highlight_end":59},{"text":"            variadic: None,","highlight_start":1,"highlight_end":28},{"text":"            output: syn::ReturnType::Type(Default::default(), Box::new(str_to_ty(\"usize\"))),","highlight_start":1,"highlight_end":93},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        block: syn::Block {","highlight_start":1,"highlight_end":28},{"text":"            brace_token: Default::default(),","highlight_start":1,"highlight_end":45},{"text":"            stmts: vec![syn::Stmt::Expr({","highlight_start":1,"highlight_end":42},{"text":"                // construct the unary operator","highlight_start":1,"highlight_end":48},{"text":"                let mut sizes = subelems","highlight_start":1,"highlight_end":41},{"text":"                    .iter()","highlight_start":1,"highlight_end":28},{"text":"                    .map(|s| match s {","highlight_start":1,"highlight_end":39},{"text":"                        Field::Actual { ty, vec_len_index, .. } => Box::new(syn::Expr::Call(syn::ExprCall {","highlight_start":1,"highlight_end":108},{"text":"                            attrs: vec![],","highlight_start":1,"highlight_end":43},{"text":"                            func: Box::new(syn::Expr::Path(syn::ExprPath {","highlight_start":1,"highlight_end":75},{"text":"                                attrs: vec![],","highlight_start":1,"highlight_end":47},{"text":"                                qself: None,","highlight_start":1,"highlight_end":45},{"text":"                                path: syn::Path {","highlight_start":1,"highlight_end":50},{"text":"                                    leading_colon: Some(Default::default()),","highlight_start":1,"highlight_end":77},{"text":"                                    segments: vec![","highlight_start":1,"highlight_end":52},{"text":"                                        str_to_pathseg(\"std\"),","highlight_start":1,"highlight_end":63},{"text":"                                        str_to_pathseg(\"mem\"),","highlight_start":1,"highlight_end":63},{"text":"                                        syn::PathSegment {","highlight_start":1,"highlight_end":59},{"text":"                                            ident: syn::Ident::new(\"size_of\", Span::call_site()),","highlight_start":1,"highlight_end":98},{"text":"                                            arguments: syn::PathArguments::AngleBracketed(","highlight_start":1,"highlight_end":91},{"text":"                                                syn::AngleBracketedGenericArguments {","highlight_start":1,"highlight_end":86},{"text":"                                                    colon2_token: Some(Default::default()),","highlight_start":1,"highlight_end":92},{"text":"                                                    lt_token: Default::default(),","highlight_start":1,"highlight_end":82},{"text":"                                                    args: iter::once(syn::GenericArgument::Type(","highlight_start":1,"highlight_end":97},{"text":"                                                        match vec_len_index { None => ty.clone(),","highlight_start":1,"highlight_end":98},{"text":"                                                        Some(_) => {","highlight_start":1,"highlight_end":69},{"text":"match ty {","highlight_start":1,"highlight_end":11},{"text":"    syn::Type::Path(syn::TypePath { path: syn::Path { ref segments, .. }, ..}) => {","highlight_start":1,"highlight_end":84},{"text":"        match segments[0] {","highlight_start":1,"highlight_end":28},{"text":"            syn::PathSegment { arguments: syn::PathArguments::AngleBracketed(syn::AngleBracketedGenericArguments {","highlight_start":1,"highlight_end":115},{"text":"  ref args, ..","highlight_start":1,"highlight_end":15},{"text":"}), .. } => { match args[0] {","highlight_start":1,"highlight_end":30},{"text":"  syn::GenericArgument::Type(ref ty) => syn::Type::Ptr(syn::TypePtr { star_token: Default::default(), const_token: None, mutability: Some(Default::default()), elem: Box::new(ty.clone()), }),","highlight_start":1,"highlight_end":191},{"text":"  _ => unreachable!(),","highlight_start":1,"highlight_end":23},{"text":"} },","highlight_start":1,"highlight_end":5},{"text":"            _ => unreachable!(),","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    _ => unreachable!(),","highlight_start":1,"highlight_end":25},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"                                                        } }","highlight_start":1,"highlight_end":60},{"text":"                                                    ))","highlight_start":1,"highlight_end":55},{"text":"                                                    .collect(),","highlight_start":1,"highlight_end":64},{"text":"                                                    gt_token: Default::default(),","highlight_start":1,"highlight_end":82},{"text":"                                                },","highlight_start":1,"highlight_end":51},{"text":"                                            ),","highlight_start":1,"highlight_end":47},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                    ]","highlight_start":1,"highlight_end":38},{"text":"                                    .into_iter()","highlight_start":1,"highlight_end":49},{"text":"                                    .collect(),","highlight_start":1,"highlight_end":48},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                            })),","highlight_start":1,"highlight_end":33},{"text":"                            paren_token: Default::default(),","highlight_start":1,"highlight_end":61},{"text":"                            args: iter::empty::<syn::Expr>().collect(),","highlight_start":1,"highlight_end":72},{"text":"                        })),","highlight_start":1,"highlight_end":29},{"text":"                        Field::PaddingHint { bytes } => Box::new(syn::Expr::Lit(syn::ExprLit {","highlight_start":1,"highlight_end":95},{"text":"                            attrs: vec![],","highlight_start":1,"highlight_end":43},{"text":"                            lit: syn::Lit::Int(syn::LitInt::new(","highlight_start":1,"highlight_end":65},{"text":"                                &format!(\"{}\", bytes),","highlight_start":1,"highlight_end":55},{"text":"                                Span::call_site(),","highlight_start":1,"highlight_end":51},{"text":"                            )),","highlight_start":1,"highlight_end":32},{"text":"                        })),","highlight_start":1,"highlight_end":29},{"text":"                        Field::LenSlot { .. } => Box::new(syn::Expr::Lit(syn::ExprLit {","highlight_start":1,"highlight_end":88},{"text":"                            attrs: vec![],","highlight_start":1,"highlight_end":43},{"text":"                            lit: syn::Lit::Int(syn::LitInt::new(\"2\", Span::call_site())),","highlight_start":1,"highlight_end":90},{"text":"                        })),","highlight_start":1,"highlight_end":29},{"text":"                    })","highlight_start":1,"highlight_end":23},{"text":"                    .collect::<Vec<Box<syn::Expr>>>();","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // combine them into a single size","highlight_start":1,"highlight_end":51},{"text":"                let mut current_size = sizes.pop().unwrap();","highlight_start":1,"highlight_end":61},{"text":"                while let Some(s) = sizes.pop() {","highlight_start":1,"highlight_end":50},{"text":"                    current_size = Box::new(syn::Expr::Binary(syn::ExprBinary {","highlight_start":1,"highlight_end":80},{"text":"                        attrs: vec![],","highlight_start":1,"highlight_end":39},{"text":"                        left: current_size,","highlight_start":1,"highlight_end":44},{"text":"                        op: syn::BinOp::Add(Default::default()),","highlight_start":1,"highlight_end":65},{"text":"                        right: s,","highlight_start":1,"highlight_end":34},{"text":"                    }));","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                *current_size","highlight_start":1,"highlight_end":30},{"text":"            })],","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /* Expected generated output:","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"       #[inline]","highlight_start":1,"highlight_end":17},{"text":"       fn as_bytes(&self, out: &mut [u8]) {","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"       }","highlight_start":1,"highlight_end":9},{"text":"    */","highlight_start":1,"highlight_end":7},{"text":"    let as_bytes_fn = syn::ImplItemMethod {","highlight_start":1,"highlight_end":44},{"text":"        attrs: vec![inliner()],","highlight_start":1,"highlight_end":32},{"text":"        vis: syn::Visibility::Inherited,","highlight_start":1,"highlight_end":41},{"text":"        defaultness: None,","highlight_start":1,"highlight_end":27},{"text":"        sig: syn::Signature {","highlight_start":1,"highlight_end":30},{"text":"            constness: None,","highlight_start":1,"highlight_end":29},{"text":"            asyncness: None,","highlight_start":1,"highlight_end":29},{"text":"            unsafety: None,","highlight_start":1,"highlight_end":28},{"text":"            abi: None,","highlight_start":1,"highlight_end":23},{"text":"            fn_token: Default::default(),","highlight_start":1,"highlight_end":42},{"text":"            ident: syn::Ident::new(\"as_bytes\", Span::call_site()),","highlight_start":1,"highlight_end":67},{"text":"            generics: Default::default(),","highlight_start":1,"highlight_end":42},{"text":"            paren_token: Default::default(),","highlight_start":1,"highlight_end":45},{"text":"            variadic: None,","highlight_start":1,"highlight_end":28},{"text":"            output: syn::ReturnType::Default,","highlight_start":1,"highlight_end":46},{"text":"            inputs: iter::once(self_fnarg())","highlight_start":1,"highlight_end":45},{"text":"                .chain(iter::once(syn::FnArg::Typed(syn::PatType {","highlight_start":1,"highlight_end":67},{"text":"                    attrs: vec![],","highlight_start":1,"highlight_end":35},{"text":"                    pat: Box::new(syn::Pat::Ident(syn::PatIdent {","highlight_start":1,"highlight_end":66},{"text":"                        ident: syn::Ident::new(\"bytes\", Span::call_site()),","highlight_start":1,"highlight_end":76},{"text":"                        attrs: vec![],","highlight_start":1,"highlight_end":39},{"text":"                        by_ref: None,","highlight_start":1,"highlight_end":38},{"text":"                        mutability: None,","highlight_start":1,"highlight_end":42},{"text":"                        subpat: None,","highlight_start":1,"highlight_end":38},{"text":"                    })),","highlight_start":1,"highlight_end":25},{"text":"                    colon_token: Default::default(),","highlight_start":1,"highlight_end":53},{"text":"                    ty: Box::new(syn::Type::Reference(syn::TypeReference {","highlight_start":1,"highlight_end":75},{"text":"                        and_token: Default::default(),","highlight_start":1,"highlight_end":55},{"text":"                        lifetime: None,","highlight_start":1,"highlight_end":40},{"text":"                        mutability: Some(Default::default()),","highlight_start":1,"highlight_end":62},{"text":"                        elem: Box::new(syn::Type::Slice(syn::TypeSlice {","highlight_start":1,"highlight_end":73},{"text":"                            bracket_token: Default::default(),","highlight_start":1,"highlight_end":63},{"text":"                            elem: Box::new(str_to_ty(\"u8\")),","highlight_start":1,"highlight_end":61},{"text":"                        })),","highlight_start":1,"highlight_end":29},{"text":"                    })),","highlight_start":1,"highlight_end":25},{"text":"                })))","highlight_start":1,"highlight_end":21},{"text":"                .collect(),","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        block: syn::Block {","highlight_start":1,"highlight_end":28},{"text":"            brace_token: Default::default(),","highlight_start":1,"highlight_end":45},{"text":"            stmts: vec![],","highlight_start":1,"highlight_end":27},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Combined into an Impl statement","highlight_start":1,"highlight_end":39},{"text":"    let impl_asbytesequence = syn::Item::Impl(syn::ItemImpl {","highlight_start":1,"highlight_end":62},{"text":"        unsafety: None,","highlight_start":1,"highlight_end":24},{"text":"        attrs: vec![],","highlight_start":1,"highlight_end":23},{"text":"        defaultness: None,","highlight_start":1,"highlight_end":27},{"text":"        impl_token: Default::default(),","highlight_start":1,"highlight_end":40},{"text":"        generics: Default::default(),","highlight_start":1,"highlight_end":38},{"text":"        trait_: Some((None, str_to_path(\"AsByteSequence\"), Default::default())),","highlight_start":1,"highlight_end":81},{"text":"        self_ty: Box::new(str_to_ty(&name)),","highlight_start":1,"highlight_end":45},{"text":"        brace_token: Default::default(),","highlight_start":1,"highlight_end":41},{"text":"        items: vec![","highlight_start":1,"highlight_end":21},{"text":"            syn::ImplItem::Method(size_method),","highlight_start":1,"highlight_end":48},{"text":"            syn::ImplItem::Method(as_bytes_fn),","highlight_start":1,"highlight_end":48},{"text":"        ],","highlight_start":1,"highlight_end":11},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(vec![struct_defn, impl_asbytesequence])","highlight_start":1,"highlight_end":47},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":56,"byte_end":72,"line_start":4,"line_end":4,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"#![warn(clippy::pedantic)]","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(clippy::too_many_lines)]` implied by `#[warn(clippy::pedantic)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (193/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn xstruct(name: &str, subelems: Vec<Element>) -> Result<Vec<syn::Item>, Failures> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut subelems = subelems\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .into_iter()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .filter_map(|item| TryInto::<Field>::try_into(item).ok())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(vec![struct_defn, impl_asbytesequence])\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m336\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![warn(clippy::pedantic)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::too_many_lines)]` implied by `#[warn(clippy::pedantic)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"message":"16 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 16 warnings emitted\u001b[0m\n\n"}
